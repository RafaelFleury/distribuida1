"""
Servidor de Impress√£o "Burro"

Caracter√≠sticas:
- N√ÉO participa do algoritmo de exclus√£o m√∫tua
- N√ÉO conhece outros clientes
- Apenas recebe requisi√ß√µes via gRPC e imprime mensagens
- Simula delay de impress√£o (2-3 segundos)
- Implementa apenas PrintingService

Porta padr√£o: 50051
"""

import sys
import time
import random
import argparse
import logging
from concurrent import futures
import os

import grpc

# Ajustar path para imports
script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.join(script_dir, 'generated'))

import printing_pb2
import printing_pb2_grpc


# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [SERVIDOR] %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)


class PrinterServer(printing_pb2_grpc.PrintingServiceServicer):
    """
    Implementa√ß√£o do servidor de impress√£o "burro".
    
    Este servidor apenas:
    1. Recebe requisi√ß√µes de impress√£o
    2. Imprime mensagens no console
    3. Simula delay de impress√£o
    4. Retorna confirma√ß√£o
    """
    
    def __init__(self):
        """Inicializa o servidor de impress√£o."""
        self.print_count = 0
        logger.info("Servidor de impress√£o inicializado")
    
    def SendToPrinter(self, request, context):
        """
        Processa uma requisi√ß√£o de impress√£o.
        
        Args:
            request (PrintRequest): Requisi√ß√£o contendo:
                - client_id: ID do cliente
                - message_content: Conte√∫do a ser impresso
                - lamport_timestamp: Timestamp de Lamport
                - request_number: N√∫mero da requisi√ß√£o do cliente
            context: Contexto gRPC
            
        Returns:
            PrintResponse: Resposta com confirma√ß√£o de impress√£o
        """
        self.print_count += 1
        
        # Log da requisi√ß√£o recebida
        logger.info(f"Requisi√ß√£o recebida do CLIENTE {request.client_id} "
                   f"(req #{request.request_number})")
        
        # Simular tempo de impress√£o (2-3 segundos)
        delay = random.uniform(2.0, 3.0)
        logger.info(f"Imprimindo... (delay: {delay:.2f}s)")
        
        # Impress√£o real
        print("\n" + "="*60)
        print(f"[TS: {request.lamport_timestamp}] CLIENTE {request.client_id}: {request.message_content}")
        print("="*60 + "\n")
        
        # Delay para simular impress√£o
        time.sleep(delay)
        
        # Criar resposta de confirma√ß√£o
        response = printing_pb2.PrintResponse(
            success=True,
            confirmation_message=f"Impress√£o #{self.print_count} conclu√≠da com sucesso",
            lamport_timestamp=request.lamport_timestamp  # Servidor burro n√£o tem rel√≥gio
        )
        
        logger.info(f"Impress√£o #{self.print_count} conclu√≠da para CLIENTE {request.client_id}")
        
        return response


def serve(port):
    """
    Inicia o servidor de impress√£o na porta especificada.
    
    Args:
        port (int): Porta para escutar conex√µes (padr√£o: 50051)
    """
    # Criar servidor gRPC
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    
    # Criar inst√¢ncia do servicer para manter refer√™ncia
    printer_service = PrinterServer()
    
    # Registrar o servi√ßo de impress√£o
    printing_pb2_grpc.add_PrintingServiceServicer_to_server(
        printer_service, server
    )
    
    # Bind na porta
    server_address = f'[::]:{port}'
    server.add_insecure_port(server_address)
    
    # Iniciar servidor
    server.start()
    
    logger.info("="*60)
    logger.info("üñ®Ô∏è  SERVIDOR DE IMPRESS√ÉO INICIADO")
    logger.info("="*60)
    logger.info(f"Porta: {port}")
    logger.info(f"Endere√ßo: localhost:{port}")
    logger.info("Aguardando conex√µes de clientes...")
    logger.info("Pressione Ctrl+C para encerrar")
    logger.info("="*60 + "\n")
    
    try:
        # Manter servidor rodando
        server.wait_for_termination()
    except KeyboardInterrupt:
        logger.info("\n" + "="*60)
        logger.info("üõë Encerrando servidor...")
        logger.info(f"Total de impress√µes realizadas: {printer_service.print_count}")
        logger.info("="*60)
        server.stop(0)


def main():
    """Fun√ß√£o principal do servidor."""
    parser = argparse.ArgumentParser(
        description='Servidor de Impress√£o Burro - Sistema Distribu√≠do'
    )
    parser.add_argument(
        '--port',
        type=int,
        default=50051,
        help='Porta para o servidor (padr√£o: 50051)'
    )
    
    args = parser.parse_args()
    
    # Validar porta
    if args.port < 1024 or args.port > 65535:
        logger.error(f"Porta inv√°lida: {args.port}. Use uma porta entre 1024 e 65535.")
        sys.exit(1)
    
    # Iniciar servidor
    serve(args.port)


if __name__ == '__main__':
    main()
